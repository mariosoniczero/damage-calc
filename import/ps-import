#!/usr/bin/env node

const Dex = require('../../pokemon-showdown/.sim-dist/dex').Dex;
const fs = require('fs');
const path = require('path');

const LEVELS = require('./src/random-levels.json');

const TIERS = {};
const MOVES = {};

for (let gen = 1; gen <= 8; gen++) {
	TIERS[gen] = {};
	MOVES[gen] = {};

	const dex = Dex.forFormat('gen' + gen + 'ou');
	for (const k in dex.data.Pokedex) {
		const val = dex.getSpecies(k);
		if (!val || (typeof val.exists === 'boolean' && !val.exists) || val.gen > gen) continue;
		if (val.tier === 'Unreleased') continue;
		if (val.tier.startsWith('CAP') && gen < 4) continue;

		const id = val.id === 'aegislash' ? 'aegislashshield' : val.id;
		let tier = val.tier;
		if (tier === 'Illegal' && gen === 8 && TIERS[7][id] !== 'Illegal') {
			switch (Dex.getId(TIERS[7][id])) {
				case 'uubl': case 'uu':
					tier = 'OU';
					break;
				case 'rubl': case 'ru':
					tier = 'UU';
					break;
				case 'nubl': case 'nu': case 'publ': case 'pu':
					tier = 'RU';
					break;
				}
		}
		TIERS[gen][id] = tier;

		const moves = new Set();
		if (val.essentialMove) moves.add(val.essentialMove);
		if (val.exclusiveMoves) val.exclusiveMoves.forEach(m => moves.add(m));
		if (val.comboMoves) val.comboMoves.forEach(m => moves.add(m));
		if (val.randomBattleMoves) val.randomBattleMoves.forEach(m => moves.add(m));
		if (val.randomBattleLevel) LEVELS[gen].custom[val.name] = val.randomBattleLevel;
		if (val.randomSets) {
			for (const set of val.randomSets) {
 				for (let i = 1; i <= 4; i++) {
					if (set[`baseMove${i}`]) 	moves.add(set[`baseMove${i}`]);
					if (set[`fillerMoves${i}`]) set[`fillerMoves${i}`].forEach(m => moves.add(m));
				}
			}
		}

		if (moves.size) MOVES[gen][id] = Array.from(moves).map(m => Dex.getMove(m).name);
	}
}

const src = path.resolve(__dirname, 'src');
fs.writeFileSync(path.join(src, 'tiers.json'), JSON.stringify(TIERS, null, 2));
fs.writeFileSync(path.join(src, 'random-moves.json'), JSON.stringify(MOVES, null, 2));
fs.writeFileSync(path.join(src, 'random-levels.json'), JSON.stringify(LEVELS, null, 2));